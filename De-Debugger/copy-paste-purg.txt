<p><strong><u>C++ programs run line by line and generally follow the same program structure:</u></strong></p>

                    <p><span style="background-color: #F3F3F3; font-family: monospace;">#include</span> statements at the beginning of the program, which allow access to library functionalities. <span style="background-color: #F3F3F3; font-family: monospace;">main()</span> function, which is run when the program is executed. <span style="background-color: #F3F3F3; font-family: monospace;">return 0</span> at the end of the <span style="background-color: #F3F3F3; font-family: monospace;">main()</span> function, which indicates that the program ran without issues</p>


<p><strong><u>Comments are notes left by the programmer that explain complex code.</u></strong></p>

                    <p>Comments do not affect the performance of a program because they are ignored by the compiler.</p>
                    
                    <p><u><strong>In C++, there are two types of comments:</strong></u></p>
                    <ul>
                    <li><span style="background-color: #F3F3F3; font-family: monospace;">Single-line:</span> begin with <span style="background-color: #F3F3F3; font-family: monospace;">//</span>.</li>
                    <li><span style="background-color: #F3F3F3; font-family: monospace;">Multi-line:</span> begin with <span style="background-color: #F3F3F3; font-family: monospace;">/*</span> and end with <span style="background-color: #F3F3F3; font-family: monospace;">*/</span>.</li>
                    </ul>
                    
                    <p>As a rule of thumb, comments should always go above the code they are commenting on.</p>
                    
                        </p>

                        <p><strong><u>Input and output make C++ programs more interactive.</u></strong>

                        Including the iostream library is necessary and must be placed at the beginning of the program to access input and output.</p>
                        <span style="background-color: #F3F3F3; font-family: monospace;">std::cout</span> is the “character output” and it is used together with <span style="background-color: #F3F3F3; font-family: monospace;">&lt;&lt;</span> to print to the terminal.
                        <span style="background-color: #F3F3F3; font-family: monospace;">std::cin</span> is the “character input” and it is used together with <span style="background-color: #F3F3F3; font-family: monospace;">&gt;&gt;</span> to read user input.
                        <span style="background-color: #F3F3F3; font-family: monospace;">std::endl</span> or <span style="background-color: #F3F3F3; font-family: monospace;">\n</span> can be used to insert a new line.
                        </p>

<p><strong><u>Variables</u></strong> are used to store and retrieve data. When declaring a variable, it must be given a data type and a name.

                        <span style="background-color: #f8f9fa; font-family: monospace;"><code>Multiple variables</code> of the same type can be declared in a single statement using a comma-separated list.</span>
                        
                        <span style="background-color: #f8f9fa; font-family: monospace;"><code>Variables can be declared with the <code>const</code> keyword, which prevents their value from being changed later.</span>
                        </p>

<p>
                          C++ provides two powerful features for memory manipulation:
                          
                          <ul>
                            <li>
                              <span class="bg-light p-1 font-monospace">&</span> References: aliases to existing variables
                            </li>
                            <li>
                              <span class="bg-light p-1 font-monospace">*</span> Pointers: store memory address as its value
                            </li>
                          </ul>
                          
                          Reference variables are created using the <span class="bg-light p-1 font-monospace">&</span> symbol. <span class="bg-light p-1 font-monospace">&</span> is also used to access the memory address of a variable.
                          Pointer variables are created using the <span class="bg-light p-1 font-monospace">*</span> symbol. <span class="bg-light p-1 font-monospace">*</span> is also used to obtain the value pointed to by a pointer variable.
                          </p>

<p>C++ supports different types of arithmetic operators that can perform common mathematical operations:

                          <ul>
                            <li><span class="greyHighlight">+</span> addition</li>
                            <li><span class="greyHighlight">-</span> subtraction</li>
                            <li><span class="greyHighlight">*</span> multiplication</li>
                            <li><span class="greyHighlight">/</span> division</li>
                            <li><span class="greyHighlight">%</span> modulo (yields the remainder)</li>
                          </ul></p>